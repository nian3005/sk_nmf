# -*- coding: utf-8 -*-
"""
Created on Mon Jul 30 00:05:38 2018

@author: Default
"""
# In[1] transsimission图
import matplotlib.pyplot as plt 
import scipy.signal as signal
def name_spectra(filename):
    count=0
    with open(filename,'r') as file_to_read:
        while True:
            lines = file_to_read.readline()
            count=count+1
            if count==45:
                break
            elif count==43:
                wavelength = lines
            elif count==44:
                transmission = lines
    wavelength = list(map(float,wavelength.split()))
    transmission = list(map(float,transmission.split()))
    #中值滤波
    transmission = signal.medfilt(transmission,7)
    for i in range(len(transmission)):
        if transmission[i]<=0:
            transmission[i] = 5e-324           
    return wavelength,transmission

wavelength_s,transmission_s = name_spectra("us_ui_m_s1_skin.txt")
wavelength_v,transmission_v = name_spectra('us_ui_m_s1_vein.txt')
plt.plot(wavelength_s,transmission_s, 'r')
plt.plot(wavelength_v,transmission_v, 'b')
plt.ylim((0.0, 1.0))
#plt.title("标题")
plt.xlabel("Wavelength(nm)")
plt.ylabel("Transmission(%)")

plt.rcParams['figure.figsize'] = (8.0, 4.0)
plt.show()   
     
# In[2]  吸光度
import math
def get_ab(transmission):
    return (math.log10(1/transmission))
Ab_s = list(map(get_ab,transmission_s))
Ab_v = list(map(get_ab,transmission_v))
plt.plot(wavelength_s,Ab_s, 'r')
plt.plot(wavelength_v,Ab_v, 'b')
#plt.title("标题")
plt.xlabel("Wavelength(nm)")
plt.ylabel("Absorbance")

plt.rcParams['figure.figsize'] = (8.0, 4.0)
plt.show()   


# In[]
def train(V, components, iternum, e):
    '''
    非负矩阵分解函数
    :param V:  原始矩阵
    :param components:  要提取多少个特征
    :param iternum: 迭代次数
    :param e: 误差阈值
    m像素数目，n通道数目
    :return:
    '''
    m,n = V.shape
    # 随机初始化两个矩阵
    W = np.random.random((m, components))
    H = np.random.random((components, n))
    # 迭代计算过程，循环中使用了numpy的切片操作，可以避免直接使用Python的多重循环，从而提高了运行速度
    for iter in range(iternum):
        V_pre = np.dot(W, H)
        E = V - V_pre

        err = np.sum(E * E)
        print(err)
        if err < e:
            break
        # 对照更新公式
        a = np.dot(W.T, V)
        b = np.dot(W.T, np.dot(W, H))
        H[b != 0] = (H * a / b)[b != 0]

        c = np.dot(V, H.T)
        d = np.dot(W, np.dot(H, H.T))

        W[d != 0] = (W * c / d)[d != 0]
    return W, H


# In[]
import numpy as np
import random
H0 = np.array([Ab_s,Ab_v])

x2 = [0,1,2,3,4,5,6,7,8,9]
x1 = [1,1,1,1,1,1,1,1,1,1]

W0 = np.array([x1,x2]).transpose(1,0)



V = np.dot(W0,H0)
print(W0.shape,H0.shape,V.shape)
print(V)
# In[]

W, H = train(V, 2, 1000, 1e-4)
print(H)


# In[] 端元光谱

plt.plot(wavelength_s,H[0], 'r')
plt.plot(wavelength_v,H[1], 'b')
#plt.title("标题")
plt.xlabel("Wavelength(nm)")
plt.ylabel("Absorbance")

plt.rcParams['figure.figsize'] = (8.0, 4.0)
plt.show() 

# In[] 浓度map
plt.plot(np.arange(0,10),W[:,0], 'r')
plt.plot(np.arange(0,10),W[:,1], 'b')
#plt.title("标题")
plt.xlabel("Wavelength(nm)")
plt.ylabel("Absorbance")

plt.rcParams['figure.figsize'] = (8.0, 4.0)
plt.show() 

# In[]


def semi_train(V, H0,components, iternum, e):
    '''
    非负矩阵分解函数
    :param V:  原始矩阵
    :param h:
    :param components:  要提取多少个特征
    :param iternum: 迭代次数
    :param e: 误差阈值
    m像素数目，n通道数目
    :return:
    '''
    m,n = V.shape
    # 随机初始化两个矩阵
    W1 = np.random.random((m, components))
    H1 = np.random.random((components, n))
    W0 = np.random.random((m, components))
    # 迭代计算过程，循环中使用了numpy的切片操作，可以避免直接使用Python的多重循环，从而提高了运行速度
    for iter in range(iternum):
        V_pre = np.dot(W1, H1)+np.dot(W0, H0)
        E = V - V_pre
        
        err = np.sum(E * E)
        print(err)
        if err < e:
            break
        # 对照更新公式
        
        
        c = np.dot(V, H1.T)
        d = np.dot(W1, np.dot(H1, H1.T))+np.dot(W0, np.dot(H0, H1.T))
        W1[d != 0] = (W1 * c / d)[d != 0]
        
        a = np.dot(W1.T, V)
        b = np.dot(W1.T, np.dot(W1, H1))+np.dot(W1.T, np.dot(W0, H0))
        H1[b != 0] = (H1 * a / b)[b != 0]
        
        c = np.dot(V, H0.T)
        d = np.dot(W1, np.dot(H1, H0.T))+np.dot(W0, np.dot(H0, H0.T))
        W0[d != 0] = (W0 * c / d)[d != 0]
    return W1, H1, W0





# In[]

H0 = np.array([Ab1,[0.3]*160])


x1 = [0.3]*10
x2 = [0.7]*10
W0 = np.array([x1,x2]).transpose(1,0)


V = np.dot(W0,H0)
print(W0.shape,H0.shape,V.shape)


#W, H = train(V, 2, 20000, 1e-4)

# In[]
wavelength = [
 859.500000, 860.349976, 861.200012, 862.049988, 862.890015, 863.739990,
 864.590027, 865.440002, 866.289978, 867.140015, 867.989990, 868.840027,
 869.690002, 870.530029, 871.380005, 872.229980, 873.080017, 873.929993,
 874.770020, 875.619995, 876.469971, 877.320007, 878.159973, 879.010010,
 879.859985, 880.710022, 881.549988, 882.400024, 883.250000, 884.090027,
 884.940002, 885.780029, 886.630005, 887.479980, 888.320007, 889.169983,
 890.010010, 890.859985, 891.700012, 892.549988, 893.390015, 894.239990,
 895.080017, 895.929993, 896.770020, 897.609985, 898.460022, 899.299988,
 900.150024, 900.989990, 901.830017, 902.679993, 903.520020, 904.359985,
 905.210022, 906.049988, 906.890015, 907.729980, 908.580017, 909.419983,
 910.260010, 911.099976, 911.940002, 912.780029, 913.630005, 914.469971,
 915.309998, 916.150024, 916.989990, 917.830017, 918.669983, 919.510010,
 920.349976, 921.190002, 922.030029, 922.869995, 923.710022, 924.549988,
 925.390015, 926.229980, 927.059998, 927.900024, 928.739990, 929.580017,
 930.419983, 931.260010, 932.090027, 932.929993, 933.770020, 934.609985,
 935.440002, 936.280029, 937.119995, 937.950012, 938.789978, 939.630005,
 940.460022, 941.299988, 942.130005, 942.969971, 943.799988, 944.640015,
 945.469971, 946.309998, 947.140015, 947.979980, 948.809998, 949.650024,
 950.479980, 951.309998, 952.150024, 952.979980, 953.809998, 954.650024,
 955.479980, 956.309998, 957.140015, 957.979980, 958.809998, 959.640015,
 960.469971, 961.299988, 962.130005, 962.969971, 963.799988, 964.630005,
 965.460022, 966.289978, 967.119995, 967.950012, 968.780029, 969.609985,
 970.440002, 971.270020, 972.090027, 972.919983, 973.750000, 974.580017,
 975.409973, 976.239990, 977.059998, 977.890015, 978.719971, 979.549988,
 980.369995, 981.200012, 982.030029, 982.849976, 983.679993, 984.500000,
 985.330017, 986.150024, 986.979980, 987.799988, 988.630005, 989.450012,
 990.280029, 991.099976, 991.929993, 992.750000]

plt.plot(wavelength,Ab1, 'r')
plt.plot(wavelength,H[1], 'b')

#plt.title("标题")
plt.xlabel("Wavelength(nm)")
plt.ylabel("Absorbance")

plt.rcParams['figure.figsize'] = (8.0, 4.0)
plt.show() 

# In[]
import numpy as np
Abv=[0.4090966888481847, 0.41190989830632513, 0.41611329296677707, 0.4182051704852565, 0.42207364085930854, 0.42554876071283926, 0.42872066785030877, 0.43233277265565684, 0.4361148304691261, 0.44082661979758425, 0.44505491705933997, 0.4483357756583374, 0.4513867916590832, 0.4536548012637848, 0.4582108047627119, 0.46144526631654564, 0.46098252425882774, 0.463866599351085, 0.46692325442360805, 0.469912676255208, 0.47597926785309025, 0.48004302727268744, 0.4853463272053439, 0.4949628256813088, 0.49946327387237605, 0.5049468321046465, 0.5084384254459642, 0.5129121376395072, 0.5166308220962005, 0.5210508203147238, 0.5247455376826177, 0.5283015976725259, 0.5340383235284016, 0.5359670142634186, 0.5398558383194211, 0.5438032145443782, 0.5480369902520192, 0.5501565359127873, 0.5526590716725369, 0.5569329910394636, 0.5601251220336352, 0.5617278285135926, 0.5660802510864321, 0.569171719351967, 0.5714346757453933, 0.5736684097223769, 0.5744545773151776, 0.5780763208675018, 0.5780518555242148, 0.5794459260412542, 0.5829806540872917, 0.5823224763002441, 0.5842609156634334, 0.586125862649758, 0.5864083649026777, 0.5852407157552458, 0.5874568365854415, 0.5874978742499676, 0.587895388010441, 0.5898253758278529, 0.5886962265784584, 0.5885697500920406, 0.5897091502361403, 0.5885037590829061, 0.5885888794116066, 0.5905226456617245, 0.5896898943345055, 0.5892847484646936, 0.5886489627656615, 0.5887313227443328, 0.5878035412609652, 0.5871162258803225, 0.5865530065702053, 0.5849209930097048, 0.5846351094288571, 0.5847681719846629, 0.5813355744354705, 0.5816316477038549, 0.5823560163776322, 0.581173010110196, 0.5818307762291712, 0.5799654789401858, 0.5791668997896093, 0.576925523324576, 0.5776886542949022, 0.5763570939472107, 0.5762290092117401, 0.5750439556909612, 0.5744091219104881, 0.5730738558244814, 0.5728384503914586, 0.5726186824433437, 0.5735622939631746, 0.5710236451184971, 0.5708195750825501, 0.5699013494088832, 0.5692690575589722, 0.5686452858251113, 0.5685509864750008, 0.5685542343885773, 0.5668578217625603, 0.5669480934175155, 0.5665933338439261, 0.566901344477719, 0.5687754228140669, 0.5667214070899084, 0.5672602065062812, 0.5677270051421828, 0.5684975531684604, 0.5671897766350569, 0.5682048125042712, 0.5695118417115747, 0.5687118900170175, 0.5706204224229561, 0.5688689399530157, 0.5700332482935022, 0.571403176421034, 0.5703884601987032, 0.5710852512432455, 0.5698917096702513, 0.5700695907060369, 0.5702974792320252, 0.5672809857083156, 0.5688931461811718, 0.5677643496201116, 0.5667341047570046, 0.5651432908617308, 0.5661098073847269, 0.5643505630327549, 0.5657422001489496, 0.5624902622181428, 0.5640600656722923, 0.5645828988198205, 0.5613469921294152, 0.5603071556079883, 0.5579730451641544, 0.5592123171844117, 0.5579044392587114, 0.5572121232375545, 0.5581923148063975, 0.5561161179321217, 0.5562068784595375, 0.553663062556192, 0.5546744925838366, 0.5535899621374305, 0.5521883348606695, 0.5516987274595769, 0.5514679413279466, 0.5515841781134423, 0.5496984365142449, 0.547857286792257, 0.546915873664992, 0.546267739410404, 0.5448458729878112, 0.5457136787574137, 0.5440473700926786, 0.5424093831775136, 0.540514619321647, 0.5400461151065917, 0.5397723721621696]
Abs=[0.3614017129279643, 0.36483768674546, 0.3688114848550537, 0.3710746643991641, 0.3751169345561853, 0.3776028291951996, 0.38095450749989024, 0.38535775969006864, 0.3883109418891146, 0.39348196574391653, 0.3966321508036198, 0.4017916084621686, 0.403772211164313, 0.4072979182002659, 0.4111295725080711, 0.4139583020178606, 0.41402627679304915, 0.41710870596825633, 0.42009598660991615, 0.4242695444494952, 0.43031019990502184, 0.43230809489139266, 0.4403879603903846, 0.4477392022832722, 0.4508323303171607, 0.45737746107964083, 0.4613732605062542, 0.4658266562460271, 0.4676195808932818, 0.4739130195368492, 0.4767312236340622, 0.4804907342833785, 0.48585041571178167, 0.488124070690899, 0.49191106891713704, 0.4968182530057303, 0.5013586273682744, 0.5019552594048625, 0.5047820460405206, 0.5091463913763584, 0.5128417726647589, 0.5155169975137027, 0.5181612147978683, 0.5211182686283762, 0.523029772436933, 0.5250972071218702, 0.5268228073437217, 0.5293658820436649, 0.5303851057323316, 0.5307365019547057, 0.533723774757708, 0.5343445605708266, 0.5363962655468975, 0.5370889434904107, 0.5374127640732559, 0.5383116173731589, 0.5388259051781186, 0.5398719882711455, 0.5395146754161657, 0.5402709075418418, 0.5395051505390609, 0.5396214671249315, 0.5405686618133753, 0.538017845235136, 0.5390007972159628, 0.5412230553600808, 0.5403046595057968, 0.5401847726872717, 0.5388557549599178, 0.5386995154375681, 0.5376827094317994, 0.537847621513467, 0.5363150045637465, 0.5349572045277196, 0.534169901670478, 0.534813924109414, 0.5315761142451556, 0.5308490146118483, 0.5323280362964773, 0.5316307958159374, 0.5323132761866094, 0.5296377300133693, 0.5285265136142681, 0.5269647409729958, 0.5261247474210407, 0.5278165276889001, 0.5257745738158246, 0.524600822569147, 0.5246088385187021, 0.5224640372754672, 0.5232377938226237, 0.523012586776661, 0.5232157776125959, 0.5211499928483869, 0.5205435961602949, 0.5203713063085811, 0.5202156196539006, 0.5190622504653257, 0.5186797536619606, 0.5190528906265589, 0.517340121308978, 0.5175361036937902, 0.5177555436316544, 0.5168487631910125, 0.5202940862895827, 0.5181407548485724, 0.5186468104528893, 0.5198461297907447, 0.5197142486309382, 0.5189078831080061, 0.5198254641538543, 0.5206816397026317, 0.5215483057522855, 0.5217622679706447, 0.5220907294150845, 0.5222547199234201, 0.5234881890135102, 0.5224676023364069, 0.5240067497889124, 0.5223596755619424, 0.5215508183592227, 0.5234840464981807, 0.5199409962778282, 0.5211761026128537, 0.5209798954584867, 0.5191416675326841, 0.518427345551389, 0.5192166013219291, 0.5180076271798706, 0.5189902453752347, 0.5160226907035221, 0.5167826780321463, 0.5184896337449827, 0.5160639799738873, 0.5141816290662103, 0.5135105626078316, 0.5126560769719628, 0.5127502679178344, 0.5123940001299231, 0.5120078831900532, 0.5106182876379405, 0.5106253973095701, 0.5084555852057518, 0.5087962659240238, 0.5087609795783409, 0.5074836530747507, 0.5054362219052877, 0.5050570317862173, 0.5060360544356217, 0.5045803639726589, 0.5024113930299823, 0.5028136737595967, 0.5010099781623298, 0.5006080946056088, 0.5005245406533371, 0.49954450329732697, 0.49760092961903907, 0.4957014564947275, 0.4944517902127363, 0.4951469088180648]
H0 = np.array([Abv,Abs])


x1 = [0.3]*10
x2 = [0.7]*10
W0 = np.array([x1,x2]).transpose(1,0)


V = np.dot(W0,H0)
print(W0.shape,H0.shape,V.shape)



# In[]
X = V
from sklearn.decomposition import NMF

model = NMF(n_components=2,
            init=None,
            solver='cd',
            beta_loss='frobenius',
            tol=0.01,
            max_iter=200,
            random_state=None,
            alpha=0.0,
            l1_ratio=0.0,
            verbose=0,
            shuffle=False)
model = NMF(n_components=2, random_state=0)
WW = model.fit_transform(X)
HH = model.components_
# In[]

plt.plot(wavelength,Abv, 'r')
plt.plot(wavelength,HH[0], 'r*')
plt.plot(wavelength,Abs, 'b')
plt.plot(wavelength,HH[1], 'b*')
#plt.title("标题")
plt.xlabel("Wavelength(nm)")
plt.ylabel("Absorbance")

plt.rcParams['figure.figsize'] = (8.0, 4.0)
plt.show() 
    
# In[]
plt.plot(range(10),x1, 'r')
plt.plot(range(10),WW.T[0], 'r*')
plt.plot(range(10),x2, 'b')
plt.plot(range(10),WW.T[1], 'b*')
#plt.title("标题")
plt.xlabel("Wavelength(nm)")
plt.ylabel("Absorbance")

plt.rcParams['figure.figsize'] = (8.0, 4.0)
plt.show() 

# In[]

H_1 = np.array([Abv])
H_0 = np.array([Abs])



x1 = [0.3]*10
x2 = [0.7]*10

W_1 = np.array(x1).T
W_0 = np.array(x2).T
H0 = np.array([Abv,Abs])
W0 = np.array([x1,x2]).transpose(1,0)


V = np.dot(W0,H0)
print(W_0.shape,H_0.shape,W_1.shape,H_1.shape,V.shape)

# In[]
V = np.dot(W0,H0)
print(V.shape)
print(V)

W_1, H_1, W_0 = semi_train(V, H_0, 1, 1000000, 1e-4)

H_1=H_1.reshape(-1)
plt.plot(wavelength,Abv, 'r')
plt.plot(wavelength,H_1, 'r*')

#plt.title("标题")
plt.xlabel("Wavelength(nm)")
plt.ylabel("Absorbance")

plt.rcParams['figure.figsize'] = (8.0, 4.0)
plt.show() 
#quanzhong
plt.plot(range(10),x1, 'r')
plt.plot(range(10),W_1, 'r*')
plt.plot(range(10),x2, 'b')
plt.plot(range(10),W_0, 'b*')
#plt.title("标题")
plt.xlabel("Wavelength(nm)")
plt.ylabel("Absorbance")

plt.rcParams['figure.figsize'] = (8.0, 4.0)
plt.show() 

# In[]

